install.packages("psych")
library(psych)
library(readr)
install.packages("jsonlite")
install.packages("dplyr")
df <- read_csv("Psycho50.csv")  # Ensure the file exists and is in the correct directory
if (!exists("df") || ncol(df) == 0) {
  stop("Error: 'df' is not properly loaded or is empty. Check the file path and format.")
}
df <- read.csv("Psycho50.csv")
bfi2 <- fromJSON("bfi2facets.json")$BFI2$items
library("jsonlite")
library("dplyr")
bfi2 <- fromJSON("bfi2facets.json")$BFI2$items
domain_items <- list()
for (item in bfi2) {
  domain <- item$domain
  item_id <- as.character(item$id)
  is_reversed <- item$reversed
  
  if (!domain %in% names(domain_items)) {
    domain_items[[domain]] <- list()
  }
  
  domain_items[[domain]][[item_id]] <- is_reversed
}
for (domain in names(domain_items)) {
  for (item_id in names(domain_items[[domain]])) {
    is_reversed <- domain_items[[domain]][[item_id]]
    
    if (item_id %in% colnames(df)) {
      if (is_reversed) {
        # Verifica se os dados estão na escala 1-5 antes de inverter
        if (min(df[[item_id]], na.rm = TRUE) >= 1 && max(df[[item_id]], na.rm = TRUE) <= 5) {
          df[[item_id]] <- 6 - df[[item_id]]
        }
      }
    }
  }
}
omega_results <- list()
for (domain in names(domain_items)) {
  domain_vars <- names(domain_items[[domain]])
  domain_data <- df %>% select(all_of(domain_vars)) %>% na.omit()  # Remove NAs
  
  if (ncol(domain_data) > 1) {  # Omega precisa de pelo menos 2 itens
    omega_results[[domain]] <- omega(domain_data)$omega_h
  } else {
    omega_results[[domain]] <- NA  # Se houver apenas um item, não é possível calcular
  }
}
# Exibir os resultados
print(omega_results)

source("omega.R")

source("omega.R")
library(ufs)
library(kableExtra)
scaleStructure(
data=df,
items=c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60),
ci=FALSE
);
scaleStructure(
data=df,
items=c(3, 8, 13, 18, 23, 28, 33, 38, 43, 48, 53, 58),
ci=FALSE
);
?scaleStructure
output
scaleStructure(
data=df,
items=c(1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56),
ci=FALSE
);
scaleStructure(
data=df,
items=c("5", "10", "15", "20", "25", "30", "35", "40", "45", "50","55", "60"),
ci=FALSE
);
df
df <- read.csv("Psycho50.csv")
bfi <- fromJSON("bfi2facets.json")
library(jsonlite)
bfi <- fromJSON("bfi2facets.json")
dominios <- split(meta$`BFI-2`$items, meta$`BFI-2`$items$domain)
itens_por_dominio <- lapply(dominios, function(d) {
  paste0(d$id)  # Assumindo que as colunas no CSV têm nomes como Q1, Q2, ..., Q60
})
dominios <- split(bfi$`BFI-2`$items, bfi$`BFI-2`$items$domain)
itens_por_dominio <- lapply(dominios, function(d) {
  paste0(d$id)  # Assumindo que as colunas no CSV têm nomes como Q1, Q2, ..., Q60
})
dominios
resultados <- lapply(names(itens_por_dominio), function(nome_dom) {
  cat("\n\n---", nome_dom, "---\n\n")
  scaleStructure(
    data = df,
    items = itens_por_dominio[[nome_dom]],
    digits = 3,
    ci = TRUE,
    omega.psych = TRUE,
    silent = TRUE,
    poly = TRUE  # para dados ordinais (Likert)
  )
})
names(resultados) <- names(itens_por_dominio)
names(df)
str(bfi$`BFI-2`$items)
# Supondo que 'df' é o seu dataframe com os dados:
dados <- df
# Lendo os metadados do JSON
library(jsonlite)
meta <- fromJSON("bfi2facets.json")
# Separando os itens por domínio
dominios <- split(meta$`BFI-2`$items, meta$`BFI-2`$items$domain)
# Corrigindo os nomes dos itens para bater com os nomes das colunas
itens_por_dominio <- lapply(dominios, function(d) {
  paste0("X", d$id)
})
dominios
itens_por_dominio
# Verifica se todos os itens realmente existem no dataframe
sapply(itens_por_dominio, function(itens) all(itens %in% names(dados)))
library(ufs)
resultados <- lapply(names(itens_por_dominio), function(nome_dom) {
  cat("\n\n---", nome_dom, "---\n\n")
  scaleStructure(
    data = dados,
    items = itens_por_dominio[[nome_dom]],
    digits = 3,
    ci = TRUE,
    interval.type = "normal-theory",
    omega.psych = TRUE,
    poly = TRUE,
    silent = TRUE
  )
})
names(resultados) <- names(itens_por_dominio)
itens_por_dominio$Agreeableness
scaleStructure(
data=df,
items=itens_por_dominio$Agreeableness,
ci=FALSE
);
reverter_item <- function(x) {
  return(6 - x)
}
keying <- bfi$keying
itens_invertidos <- names(keying[keying == -1])
print(itens_invertidos)
reversos <- names(bfi$reverse[bfi$reverse == TRUE])
itens_reversos <- paste0("X", reversos)  # nomes das colunas no df
itens_reversos
reversos
reversos <- names(bfi$BFI-2$items$reverse[bfi$BFI-2$items$reverse == TRUE])
bfi
reversos <- names(bfi$reversed[bfi$reversed == TRUE])
itens_reversos <- paste0("X", reversos)  # nomes das colunas no df
reversos
bfi$items$reversed
bfi$reversed
bfi$items
bfi$BFI-2
bfi$BFI2
BFI
bfi
ids_reversos <- bfi$`BFI-2`$items$id[bfi$`BFI-2`$items$reversed == TRUE]
ids_reversos
itens_reversos <- paste0("X", ids_reversos)
itens_reversos
reverter_item <- function(x) {
  return(6 - x)
}
# Aplicar reversão às colunas apropriadas
df[itens_reversos] <- lapply(df[itens_reversos], reverter_item)
# Mostrar os itens que foram revertidos
cat("Itens com pontuação revertida:", paste(itens_reversos, collapse = ", "), "\n")
library(ufs)
scaleStructure(
  data = df,
  items = itens_por_dominio$Agreeableness,
  ci = FALSE
)
dominios
itens_por_dominios
itens_por_dominio
library(ufs)
scaleStructure(
  data = df,
  items = itens_por_dominio$Conscientiousness,
  ci = FALSE
)
library(ufs)
scaleStructure(
  data = df,
  items = itens_por_dominio$Extraversion,
  ci = FALSE
)
library(ufs)
scaleStructure(
  data = df,
  items = itens_por_dominio$Open_Mindedness,
  ci = FALSE
)
library(ufs)
scaleStructure(
  data = df,
  items = itens_por_dominio$Negative_Emotionality,
  ci = FALSE
)
library(ufs)
scaleDiagnosis(
  data = df,
  items = itens_por_dominio$Negative_Emotionality,
  ci = FALSE
)
install.packages(GGally)
install.packages("GGally")
library(GGally)
library(ufs)
scaleDiagnosis(
  data = df,
  items = itens_por_dominio$Negative_Emotionality,
  ci = FALSE
)
library(ufs)
install.packages("GGally")
  items = itens_por_dominio$Negative_Emotionality,
)
library(ufs)
scaleDiagnosis(
  data = df,
  items = itens_por_dominio$Open_Mindedness,
)
library(ufs)
scaleStructure(
  data = df,
  items = itens_por_dominio$Extraversion,
)
library(ufs)
scaleDiagnosis(
  data = df,
  items = itens_por_dominio$Extraversion,
)
library(ufs)
scaleDiagnosis(
  data = df,
  items = itens_por_dominio$Open_Mindedness,
)
library(ufs)
scaleDiagnosis(
  data = df,
  items = itens_por_dominio$Negative_Emotionality,
)
library(ufs)
scaleDiagnosis(
  data = df,
  items = itens_por_dominio$Extraversion)
library(ufs)
scaleDiagnosis(
  data = df,
  items = itens_por_dominio$Conscientiousness
)
library(ufs)
scaleDiagnosis(
  data = df,
  items = itens_por_dominio$Agreeableness
)
library(ufs)
scaleStructure(
  data = df,
  items = itens_por_dominio$Negative_Emotionality,
  ci = TRUE
)
quit()
quit()
savehistory("meuhistorico.Rhistory")

